(defn v+ [v u] (mapv + v u))
(defn v- [v u] (mapv - v u))
(defn v* [v u] (mapv * v u))
(defn v*s [v s] (mapv (fn [a] (* a s)) v))
(defn scalar [v u] (reduce + (v* v u)))
(defn vect [[v1 v2 v3] [u1 u2 u3]]
  [(- (* v2 u3) (* v3 u2))
   (- (* v3 u1) (* v1 u3))
   (- (* v1 u2) (* v2 u1))])
(defn m+ [m l] (mapv v+ m l))
(defn m- [m l] (mapv v- m l))
(defn m* [m l] (mapv v* m l))
(defn transpose [m] (apply mapv vector m))
(defn m*s [m s] (mapv (fn [a] (v*s a s)) m))
(defn m*v [m v] (mapv (fn [a b] (reduce + (v*s a b))) m v))
(defn m*m [m l] (let [t (transpose l)] (mapv (fn [a] (mapv (fn [b] (scalar a b)) t)) m)))
